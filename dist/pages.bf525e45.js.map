{"mappings":"ACCA,IAAM,QAAU,SAAS,cAAc,CAAC,WAClC,WAAa,SAAS,cAAc,CAAC,YAErC,kBAAoB,cACpB,mBAAqB,eACrB,4BAA8B,MAC9B,eAAiB,KAGvB,eAAe,OACX,QAAQ,SAAS,CAAG;A;AAEpB,IAAA,CAAC,CAED,GAAI,CACA,IAAI,EAAe,MAAM,cAEnB,EAAgB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,oBAChD,EAAc,IAAI,OAAO,OAAO,EAElC,CAAA,GAAkB,EAAc,EAAc,SAAS,CAd5C,MAeX,QAAQ,GAAG,CAAC,uDACZ,gBAAgB,EAAa,OAAO,CAAE,EAAa,WAAW,CAAE,EAAa,IAAI,EACjF,eAAe,EAAc,WAAW,CAAE,EAAc,SAAS,CAAE,EAAc,IAAI,IAErF,QAAQ,GAAG,CAAC,qEACZ,MAAM,aAAa,EAAa,IAAI,CAAE,EAAa,WAAW,EAEtE,CAAE,MAAO,EAAK,CACV,QAAQ,KAAK,CAAC,2CAA4C,GAC1D,QAAQ,SAAS,CAAG;A;AAEpB,QAAA,CAAC,AACL,CACJ,CAGA,eAAe,cAEX,IAAM,EAAiB,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,qBACjD,EAAc,IAAI,OAAO,OAAO,UAEtC,AAAI,GAAmB,EAAc,EAAe,SAAS,CArC7B,OAsC5B,QAAQ,GAAG,CAAC,mDACL,IAEP,QAAQ,GAAG,CAAC,wEACG,MAAM,kBAG7B,CAGA,eAAe,kBACX,IAAI,EAEJ,GAAI,CAAC,UAAU,WAAW,CAQtB,OAPA,QAAQ,GAAG,CAAC,iFACZ,EAAe,CACX,QAAS,iBACT,YAAa,KACb,KAAM,SACN,UAAW,IAAI,OAAO,OAAO,EACjC,EAIJ,GAAI,CACA,QAAQ,SAAS,CAAG,qDAEpB,IAAM,EAAW,MAAM,4BACjB,EAAM,EAAS,MAAM,CAAC,QAAQ,CAC9B,EAAM,EAAS,MAAM,CAAC,SAAS,CAE/B,EAAM,MAAM,MAAM,CAAC,kBAAkB,EAAE,EAAI,KAAK,EAAE,EAAA,CAAK,EACvD,EAAe,MAAM,EAAI,IAAI,GAEnC,GAAI,CAAC,GAAgB,CAAC,EAAa,OAAO,EAAI,CAAC,EAAa,IAAI,CAC5D,MAAM,AAAI,MAAM,iCAapB,OAVA,EAAe,CACX,QAAS,EAAa,YAAY,CAClC,YAAa,EAAa,OAAO,CACjC,KAAM,EAAa,IAAI,CACvB,UAAW,IAAI,OAAO,OAAO,EACjC,EAEA,aAAa,OAAO,CAAC,mBAAoB,KAAK,SAAS,CAAC,IACxD,QAAQ,GAAG,CAAC,wCAEL,CACX,CAAE,MAAO,EAAK,CAEV,OAAQ,EAAI,IAAI,EACZ,KAAK,EAAI,iBAAiB,CACtB,QAAQ,KAAK,CAAC,4CACd,QAAQ,SAAS,CAAG,6FACpB,KACJ,MAAK,EAAI,oBAAoB,CACzB,QAAQ,KAAK,CAAC,wCACd,QAAQ,SAAS,CAAG,+FACpB,KACJ,MAAK,EAAI,OAAO,CACZ,QAAQ,KAAK,CAAC,+CACd,QAAQ,SAAS,CAAG,iGACpB,KACJ,SACI,QAAQ,KAAK,CAAC,uDAAwD,GACtE,QAAQ,SAAS,CAAG,+FAE5B,CAQA,MANe,CACX,QAAS,iBACT,YAAa,KACb,KAAM,SACN,UAAW,IAAI,OAAO,OAAO,EACjC,CAEJ,CACJ,CAEA,SAAS,4BACL,OAAO,IAAI,QAAQ,CAAC,EAAS,KAMzB,UAAU,WAAW,CAAC,kBAAkB,CAAC,EAAS,EALlC,CACZ,mBAAoB,CAAA,EACpB,QAAS,IACT,WAAY,CAChB,EAEJ,EACJ,CAGA,eAAe,aAAa,CAAI,CAAE,CAAW,EACzC,GAAI,CACA,IAAM,EAAM,MAAM,MAAM,CAAC,kBAAkB,EAAE,mBAAmB,GAAM,SAAS,EAAE,mBAAmB,GAAA,CAAc,EAElH,GAAI,CAAC,EAAI,EAAE,CACP,MAAM,AAAI,MAAM,CAAC,oBAAoB,EAAE,EAAI,MAAM,CAAA,CAAE,EAEvD,IAAM,EAAc,MAAM,EAAI,IAAI,GAE5B,EAAO,EAAY,IAAI,CAAC,IAAI,CAC5B,EAAY,EAAY,OAAO,CAAC,EAAE,CAAC,WAAW,CAC9C,EAAO,CAAC,MAAM,EAAE,EAAY,OAAO,CAAC,EAAE,CAAC,IAAI,CAAA,CAAE,CAE7C,EAAe,KAAK,KAAK,CAAC,aAAa,OAAO,CAAC,qBACrD,gBAAgB,EAAa,OAAO,CAAE,EAAa,WAAW,CAAE,EAAa,IAAI,EACjF,eAAe,EAAM,EAAW,GAEhC,IAAM,EAAc,CAChB,YAAa,EACb,UAAW,EACX,KAAM,EACN,UAAW,IAAI,OAAO,OAAO,EACjC,EACA,aAAa,OAAO,CAAC,kBAAmB,KAAK,SAAS,CAAC,IACvD,QAAQ,GAAG,CAAC,qCAEhB,CAAE,MAAO,EAAK,CACV,QAAQ,KAAK,CAAC,0BAA2B,GACzC,QAAQ,SAAS,CAAG,wEACxB,CACJ,CAGA,SAAS,gBAAgB,CAAO,CAAE,CAAW,CAAE,CAAI,EAE/C,WAAW,WAAW,CADL,CAAC,8BAA8B,EAAE,EAAK,EAAE,EAAE,EAAQ,CAAC,CAAC,AAEzE,CAEA,SAAS,eAAe,CAAW,CAAE,CAAS,CAAE,CAAI,EAChD,QAAQ,SAAS,CAAG;AACN,kBAAA,EAAE,EAAK,OAAO,EAAE,EAAU;AACV,kCAAA,EAAE,EAAY;AAAU,gCAC1B,EAAE,EAAU;AACxC,IAAA,CAAC,AACL,CAGA","sources":["<anon>","public/js/weather/weather-api.js"],"sourcesContent":["// ------------ GLOBAL VARIABLES ------------------------\nconst weather = document.getElementById(\"weather\");\nconst locationEl = document.getElementById(\"location\");\nconst WEATHER_CACHE_KEY = 'WeatherInfo';\nconst LOCATION_CACHE_KEY = 'LocationInfo';\nconst TWENTY_FOUR_HOURS_IN_MILLIS = 86400000;\nconst HOUR_IN_MILLIS = 3600000;\n// ------------ MAIN INITIALIZATION FUNCTION ------------------------\nasync function init() {\n    weather.innerHTML = `\n      <span id=\"loading\">Loading weather</span>\n    `;\n    try {\n        let locationInfo = await getLocation();\n        const cachedWeather = JSON.parse(localStorage.getItem(WEATHER_CACHE_KEY));\n        const currentTime = new Date().getTime();\n        if (cachedWeather && currentTime - cachedWeather.timestamp < HOUR_IN_MILLIS) {\n            console.log(\"Weather info is fresh, displaying from localStorage\");\n            displayLocation(locationInfo.country, locationInfo.countryCode, locationInfo.city);\n            displayWeather(cachedWeather.temperature, cachedWeather.condition, cachedWeather.icon);\n        } else {\n            console.log(\"Weather info is older than 1 hour or not found, fetching new data\");\n            await fetchWeather(locationInfo.city, locationInfo.countryCode);\n        }\n    } catch (err) {\n        console.error(\"An error occurred during initialization:\", err);\n        weather.innerHTML = `\n            <span class=\"error\">Failed to get location or weather data.</span>\n        `;\n    }\n}\n// ------------ GET LOCATION DATA ------------------------\nasync function getLocation() {\n    let locationInfo;\n    const cachedLocation = JSON.parse(localStorage.getItem(LOCATION_CACHE_KEY));\n    const currentTime = new Date().getTime();\n    if (cachedLocation && currentTime - cachedLocation.timestamp < TWENTY_FOUR_HOURS_IN_MILLIS) {\n        console.log(\"Location info is fresh, using from localStorage\");\n        return cachedLocation;\n    } else {\n        console.log(\"Location info is older than 24 hours or not found, fetching new data\");\n        locationInfo = await callLocationAPI();\n        return locationInfo;\n    }\n}\n// Fetch new location data\nasync function callLocationAPI() {\n    let LocationInfo;\n    if (!navigator.geolocation) {\n        console.log(\"Geolocation is not supported by this browser. Defaulting to a fixed location.\");\n        LocationInfo = {\n            country: \"United Kingdom\",\n            countryCode: \"UK\",\n            city: \"London\",\n            timestamp: new Date().getTime()\n        };\n        return LocationInfo;\n    }\n    try {\n        weather.innerHTML = `<span id=\"loading\">Getting your location...</span>`;\n        const position = await getCurrentPositionPromise();\n        const lat = position.coords.latitude;\n        const lon = position.coords.longitude;\n        const res = await fetch(`/api/location?lat=${lat}&lon=${lon}`);\n        const locationData = await res.json();\n        if (!locationData || !locationData.country || !locationData.city) throw new Error(\"Invalid reverse geocode data.\");\n        LocationInfo = {\n            country: locationData.country_name,\n            countryCode: locationData.country,\n            city: locationData.city,\n            timestamp: new Date().getTime()\n        };\n        localStorage.setItem(LOCATION_CACHE_KEY, JSON.stringify(LocationInfo));\n        console.log(\"Location info saved to local storage\");\n        return LocationInfo;\n    } catch (err) {\n        // Robust error handling based on the GeolocationPositionError codes\n        switch(err.code){\n            case err.PERMISSION_DENIED:\n                console.error(\"User denied the request for Geolocation.\");\n                weather.innerHTML = `<span class=\"error\">Location access denied. Showing weather for a default location.</span>`;\n                break;\n            case err.POSITION_UNAVAILABLE:\n                console.error(\"Location information is unavailable.\");\n                weather.innerHTML = `<span class=\"error\">Could not find your city. Showing weather for a default location.</span>`;\n                break;\n            case err.TIMEOUT:\n                console.error(\"The request to get user location timed out.\");\n                weather.innerHTML = `<span class=\"error\">Location request timed out. Showing weather for a default location.</span>`;\n                break;\n            default:\n                console.error(\"An unknown error occurred during location retrieval:\", err);\n                weather.innerHTML = `<span class=\"error\">An unknown error occurred. Showing weather for a default location.</span>`;\n                break;\n        }\n        LocationInfo = {\n            country: \"United Kingdom\",\n            countryCode: \"UK\",\n            city: \"London\",\n            timestamp: new Date().getTime()\n        };\n        return LocationInfo;\n    }\n}\nfunction getCurrentPositionPromise() {\n    return new Promise((resolve, reject)=>{\n        const options = {\n            enableHighAccuracy: true,\n            timeout: 5000,\n            maximumAge: 0\n        };\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\n    });\n}\n// Fetch new weather data\nasync function fetchWeather(city, countryCode) {\n    try {\n        const res = await fetch(`/api/weather?city=${encodeURIComponent(city)}&country=${encodeURIComponent(countryCode)}`);\n        if (!res.ok) throw new Error(`HTTP error! status: ${res.status}`);\n        const weatherData = await res.json();\n        const temp = weatherData.main.temp;\n        const condition = weatherData.weather[0].description;\n        const icon = `https:${weatherData.weather[0].icon}`;\n        const locationInfo = JSON.parse(localStorage.getItem(LOCATION_CACHE_KEY));\n        displayLocation(locationInfo.country, locationInfo.countryCode, locationInfo.city);\n        displayWeather(temp, condition, icon);\n        const weatherInfo = {\n            temperature: temp,\n            condition: condition,\n            icon: icon,\n            timestamp: new Date().getTime()\n        };\n        localStorage.setItem(WEATHER_CACHE_KEY, JSON.stringify(weatherInfo));\n        console.log(\"Weather data saved to localStorage\");\n    } catch (err) {\n        console.error(\"Error fetching weather:\", err);\n        weather.innerHTML = `<span class=\"error\">Weather data unavailable for your location.</span>`;\n    }\n}\n// ---------------- DISPLAY RESULTS -------------\nfunction displayLocation(country, countryCode, city) {\n    const location = `Greetings to the visitor from ${city}, ${country}!`;\n    locationEl.textContent = location;\n}\nfunction displayWeather(temperature, condition, icon) {\n    weather.innerHTML = `\n        <img src=\"${icon}\" alt=\"${condition}\" class=\"weather-icon\">\n        <span class=\"temperature\">${temperature}\\xb0C</span>\n        <span class=\"condition\">${condition}</span>\n    `;\n}\n// Start the whole process\ninit();\n\n//# sourceMappingURL=pages.bf525e45.js.map\n","// ------------ GLOBAL VARIABLES ------------------------\r\nconst weather = document.getElementById(\"weather\");\r\nconst locationEl = document.getElementById(\"location\");\r\n\r\nconst WEATHER_CACHE_KEY = 'WeatherInfo';\r\nconst LOCATION_CACHE_KEY = 'LocationInfo';\r\nconst TWENTY_FOUR_HOURS_IN_MILLIS = 24 * 60 * 60 * 1000;\r\nconst HOUR_IN_MILLIS = 60 * 60 * 1000;\r\n\r\n// ------------ MAIN INITIALIZATION FUNCTION ------------------------\r\nasync function init() {\r\n    weather.innerHTML = `\r\n      <span id=\"loading\">Loading weather</span>\r\n    `;\r\n\r\n    try {\r\n        let locationInfo = await getLocation();\r\n\r\n        const cachedWeather = JSON.parse(localStorage.getItem(WEATHER_CACHE_KEY));\r\n        const currentTime = new Date().getTime();\r\n\r\n        if (cachedWeather && (currentTime - cachedWeather.timestamp < HOUR_IN_MILLIS)) {\r\n            console.log(\"Weather info is fresh, displaying from localStorage\");\r\n            displayLocation(locationInfo.country, locationInfo.countryCode, locationInfo.city);\r\n            displayWeather(cachedWeather.temperature, cachedWeather.condition, cachedWeather.icon);\r\n        } else {\r\n            console.log(\"Weather info is older than 1 hour or not found, fetching new data\");\r\n            await fetchWeather(locationInfo.city, locationInfo.countryCode);\r\n        }\r\n    } catch (err) {\r\n        console.error(\"An error occurred during initialization:\", err);\r\n        weather.innerHTML = `\r\n            <span class=\"error\">Failed to get location or weather data.</span>\r\n        `;\r\n    }\r\n}\r\n\r\n// ------------ GET LOCATION DATA ------------------------\r\nasync function getLocation() {\r\n    let locationInfo;\r\n    const cachedLocation = JSON.parse(localStorage.getItem(LOCATION_CACHE_KEY));\r\n    const currentTime = new Date().getTime();\r\n\r\n    if (cachedLocation && (currentTime - cachedLocation.timestamp < TWENTY_FOUR_HOURS_IN_MILLIS)) {\r\n        console.log(\"Location info is fresh, using from localStorage\");\r\n        return cachedLocation;\r\n    } else {\r\n        console.log(\"Location info is older than 24 hours or not found, fetching new data\");\r\n        locationInfo = await callLocationAPI();\r\n        return locationInfo;\r\n    }\r\n}\r\n\r\n// Fetch new location data\r\nasync function callLocationAPI() {\r\n    let LocationInfo;\r\n    \r\n    if (!navigator.geolocation) {\r\n        console.log(\"Geolocation is not supported by this browser. Defaulting to a fixed location.\");\r\n        LocationInfo = {\r\n            country: \"United Kingdom\",\r\n            countryCode: \"UK\",\r\n            city: \"London\",\r\n            timestamp: new Date().getTime()\r\n        };\r\n        return LocationInfo;\r\n    }\r\n\r\n    try {\r\n        weather.innerHTML = `<span id=\"loading\">Getting your location...</span>`;\r\n        \r\n        const position = await getCurrentPositionPromise();\r\n        const lat = position.coords.latitude;\r\n        const lon = position.coords.longitude;\r\n        \r\n        const res = await fetch(`/api/location?lat=${lat}&lon=${lon}`);\r\n        const locationData = await res.json();\r\n        \r\n        if (!locationData || !locationData.country || !locationData.city) {\r\n            throw new Error(\"Invalid reverse geocode data.\");\r\n        }\r\n        \r\n        LocationInfo = {\r\n            country: locationData.country_name,\r\n            countryCode: locationData.country,\r\n            city: locationData.city,\r\n            timestamp: new Date().getTime()\r\n        };\r\n        \r\n        localStorage.setItem(LOCATION_CACHE_KEY, JSON.stringify(LocationInfo));\r\n        console.log(\"Location info saved to local storage\");\r\n        \r\n        return LocationInfo;\r\n    } catch (err) {\r\n       // Robust error handling based on the GeolocationPositionError codes\r\n        switch (err.code) {\r\n            case err.PERMISSION_DENIED:\r\n                console.error(\"User denied the request for Geolocation.\");\r\n                weather.innerHTML = `<span class=\"error\">Location access denied. Showing weather for a default location.</span>`;\r\n                break;\r\n            case err.POSITION_UNAVAILABLE:\r\n                console.error(\"Location information is unavailable.\");\r\n                weather.innerHTML = `<span class=\"error\">Could not find your city. Showing weather for a default location.</span>`;\r\n                break;\r\n            case err.TIMEOUT:\r\n                console.error(\"The request to get user location timed out.\");\r\n                weather.innerHTML = `<span class=\"error\">Location request timed out. Showing weather for a default location.</span>`;\r\n                break;\r\n            default:\r\n                console.error(\"An unknown error occurred during location retrieval:\", err);\r\n                weather.innerHTML = `<span class=\"error\">An unknown error occurred. Showing weather for a default location.</span>`;\r\n                break;\r\n        }\r\n\r\n        LocationInfo = {\r\n            country: \"United Kingdom\",\r\n            countryCode: \"UK\",\r\n            city: \"London\",\r\n            timestamp: new Date().getTime()\r\n        };\r\n        return LocationInfo;\r\n    }\r\n}\r\n\r\nfunction getCurrentPositionPromise() {\r\n    return new Promise((resolve, reject) => {\r\n        const options = {\r\n            enableHighAccuracy: true,\r\n            timeout: 5000,\r\n            maximumAge: 0\r\n        };\r\n        navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n    });\r\n}\r\n    \r\n// Fetch new weather data\r\nasync function fetchWeather(city, countryCode) {\r\n    try {\r\n        const res = await fetch(`/api/weather?city=${encodeURIComponent(city)}&country=${encodeURIComponent(countryCode)}`);\r\n        \r\n        if (!res.ok) {\r\n            throw new Error(`HTTP error! status: ${res.status}`);\r\n        }\r\n        const weatherData = await res.json();\r\n        \r\n        const temp = weatherData.main.temp;\r\n        const condition = weatherData.weather[0].description;\r\n        const icon = `https:${weatherData.weather[0].icon}`;\r\n        \r\n        const locationInfo = JSON.parse(localStorage.getItem(LOCATION_CACHE_KEY));\r\n        displayLocation(locationInfo.country, locationInfo.countryCode, locationInfo.city);\r\n        displayWeather(temp, condition, icon);\r\n        \r\n        const weatherInfo = {\r\n            temperature: temp,\r\n            condition: condition,\r\n            icon: icon,\r\n            timestamp: new Date().getTime()\r\n        };\r\n        localStorage.setItem(WEATHER_CACHE_KEY, JSON.stringify(weatherInfo));\r\n        console.log(\"Weather data saved to localStorage\");\r\n\r\n    } catch (err) {\r\n        console.error(\"Error fetching weather:\", err);\r\n        weather.innerHTML = `<span class=\"error\">Weather data unavailable for your location.</span>`;\r\n    }\r\n}\r\n\r\n// ---------------- DISPLAY RESULTS -------------\r\nfunction displayLocation(country, countryCode, city){\r\n    const location = `Greetings to the visitor from ${city}, ${country}!`;\r\n    locationEl.textContent = location;\r\n}\r\n\r\nfunction displayWeather(temperature, condition, icon) {\r\n    weather.innerHTML = `\r\n        <img src=\"${icon}\" alt=\"${condition}\" class=\"weather-icon\">\r\n        <span class=\"temperature\">${temperature}°C</span>\r\n        <span class=\"condition\">${condition}</span>\r\n    `;\r\n}\r\n\r\n// Start the whole process\r\ninit();"],"names":["weather","document","getElementById","locationEl","WEATHER_CACHE_KEY","LOCATION_CACHE_KEY","TWENTY_FOUR_HOURS_IN_MILLIS","HOUR_IN_MILLIS","init","innerHTML","locationInfo","getLocation","cachedWeather","JSON","parse","localStorage","getItem","currentTime","Date","getTime","timestamp","console","log","displayLocation","country","countryCode","city","displayWeather","temperature","condition","icon","fetchWeather","err","error","cachedLocation","callLocationAPI","LocationInfo","navigator","geolocation","position","getCurrentPositionPromise","lat","coords","latitude","lon","longitude","res","fetch","locationData","json","Error","country_name","setItem","stringify","code","PERMISSION_DENIED","POSITION_UNAVAILABLE","TIMEOUT","Promise","resolve","reject","getCurrentPosition","enableHighAccuracy","timeout","maximumAge","encodeURIComponent","ok","status","weatherData","temp","main","description","weatherInfo","textContent"],"version":3,"file":"pages.bf525e45.js.map"}