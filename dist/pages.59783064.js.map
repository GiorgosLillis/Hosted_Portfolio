{"mappings":"ACUA,SAAS,SAAS,CAAK,EACrB,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,gBAAiB,cAAe,cAC/D,SAAS,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAA,CAAO,EAC5C,aAAa,OAAO,CAAC,aAAc,EACrC,CAEA,SAAS,iCACP,AAAI,OAAO,UAAU,EAAI,OAAO,UAAU,CAAC,gCAAgC,OAAO,CACzE,OACE,OAAO,UAAU,EAAI,OAAO,UAAU,CAAC,iCAAiC,OAAO,CACjF,QAEF,SACT,CAvBA,IAAI,IAAI,CAAC,CACL,WAAY,mBACZ,KAAM,CAAA,EACN,SAAU,IACV,OAAQ,cACR,OAAQ,CAAA,EACR,gBAAiB,YACrB,GAkBA,IAAM,WAAa,aAAa,OAAO,CAAC,cACrC,WACD,SAAS,YAGT,SADyB,2BAM3B,OAAO,UAAU,CAAC,gCAAgC,gBAAgB,CAAC,SAAU,AAAA,IACpE,aAAa,OAAO,CAAC,gBAClB,EAAE,OAAO,CACT,SAAS,QAET,SAAS,WAGrB,GAEA,IAAM,aAAe,SAAS,cAAc,CAAC,gBACvC,aAAe,SAAS,cAAc,CAAC,gBAEzC,KAAO,IAAI,KACX,QAAU,CAAE,QAAS,OAAQ,KAAM,UAAW,MAAO,OAAQ,IAAK,SAAU,CAChF,CAAA,aAAa,SAAS,CAAG,KAAK,kBAAkB,CAAC,QAAS,SAE1D,IAAI,KAAO,KAAK,kBAAkB,CAAC,QAAS,CAAE,KAAM,UAAW,OAAQ,UAAW,OAAQ,SAAU,EACpG,CAAA,aAAa,SAAS,CAAG,KACzB,YAAY,KAGR,aAAa,SAAS,CADX,AADA,IAAI,OACC,kBAAkB,CAAC,QAAS,CAAE,KAAM,UAAW,OAAQ,UAAW,OAAQ,SAAU,EAExG,EAAG","sources":["<anon>","public/js/common/effects.js"],"sourcesContent":["AOS.init({\n    startEvent: 'DOMContentLoaded',\n    once: true,\n    duration: 1000,\n    easing: 'ease-in-out',\n    mirror: false,\n    anchorPlacement: 'top-bottom'\n});\nfunction setTheme(theme) {\n    document.body.classList.remove('theme-default', 'theme-light', 'theme-dark');\n    document.body.classList.add(`theme-${theme}`);\n    localStorage.setItem('site-theme', theme);\n}\nfunction getSystemPreferredTheme() {\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) return 'dark'; // System prefers dark mode\n    else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) return 'light'; // System prefers light mode\n    return 'default'; // Fallback if no preference is detected or feature not supported\n}\nconst savedTheme = localStorage.getItem('site-theme');\nif (savedTheme) setTheme(savedTheme);\nelse {\n    const systemPreference = getSystemPreferredTheme();\n    setTheme(systemPreference);\n}\n// This allows the theme to change automatically if the user switches their system theme while the page is open.\n// (prefers-color-scheme: dark) == a media query property and a boolean value to check the condition\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e)=>{\n    if (!localStorage.getItem('site-theme')) {\n        if (e.matches) setTheme('dark');\n        else setTheme('default');\n    }\n});\nconst current_date = document.getElementById('current-date');\nconst current_time = document.getElementById('current-time');\nlet date = new Date();\nlet options = {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n};\ncurrent_date.innerHTML = date.toLocaleDateString('en-GB', options);\nlet time = date.toLocaleTimeString('en-US', {\n    hour: '2-digit',\n    minute: '2-digit',\n    second: '2-digit'\n});\ncurrent_time.innerHTML = time;\nsetInterval(()=>{\n    let date = new Date();\n    let time = date.toLocaleTimeString('en-US', {\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n    });\n    current_time.innerHTML = time;\n}, 1000);\n\n//# sourceMappingURL=pages.59783064.js.map\n","AOS.init({\r\n    startEvent: 'DOMContentLoaded',\r\n    once: true,               \r\n    duration: 1000,\r\n    easing: 'ease-in-out',\r\n    mirror: false,               \r\n    anchorPlacement: 'top-bottom'\r\n});\r\n    \r\n\r\nfunction setTheme(theme) {\r\n  document.body.classList.remove('theme-default', 'theme-light', 'theme-dark');\r\n  document.body.classList.add(`theme-${theme}`);\r\n  localStorage.setItem('site-theme', theme);\r\n}\r\n\r\nfunction getSystemPreferredTheme() {\r\n  if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\r\n    return 'dark'; // System prefers dark mode\r\n  } else if (window.matchMedia && window.matchMedia('(prefers-color-scheme: light)').matches) {\r\n    return 'light'; // System prefers light mode\r\n  }\r\n  return 'default'; // Fallback if no preference is detected or feature not supported\r\n}\r\n\r\nconst savedTheme = localStorage.getItem('site-theme');\r\nif(savedTheme) {\r\n  setTheme(savedTheme);\r\n} else {\r\n  const systemPreference = getSystemPreferredTheme();\r\n  setTheme(systemPreference);\r\n}\r\n\r\n// This allows the theme to change automatically if the user switches their system theme while the page is open.\r\n// (prefers-color-scheme: dark) == a media query property and a boolean value to check the condition\r\nwindow.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\r\n    if (!localStorage.getItem('site-theme')) { // Only apply if user hasn't manually set a theme\r\n        if (e.matches) { // If the query is true\r\n            setTheme('dark');\r\n        } else {\r\n            setTheme('default'); \r\n        }\r\n    }\r\n});\r\n\r\nconst current_date = document.getElementById('current-date');\r\nconst current_time = document.getElementById('current-time');\r\n\r\nlet date = new Date();\r\nlet options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' };\r\ncurrent_date.innerHTML = date.toLocaleDateString('en-GB', options);\r\n\r\nlet time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\r\ncurrent_time.innerHTML = time;\r\nsetInterval(() => {\r\n    let date = new Date();\r\n    let time = date.toLocaleTimeString('en-US', { hour: '2-digit', minute: '2-digit', second: '2-digit' });\r\n    current_time.innerHTML = time;\r\n}, 1000);\r\n\r\n\r\n"],"names":["setTheme","theme","document","body","classList","remove","add","localStorage","setItem","getSystemPreferredTheme","window","matchMedia","matches","AOS","init","startEvent","once","duration","easing","mirror","anchorPlacement","savedTheme","getItem","addEventListener","e","current_date","getElementById","current_time","date","Date","options","weekday","year","month","day","innerHTML","toLocaleDateString","time","toLocaleTimeString","hour","minute","second","setInterval"],"version":3,"file":"pages.59783064.js.map"}