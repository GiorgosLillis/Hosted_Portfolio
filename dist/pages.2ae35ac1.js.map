{"mappings":"ACAA,SAAS,cAAc,CAAK,EAC1B,OAAO,EACJ,OAAO,CAAC,KAAM,QACd,OAAO,CAAC,KAAM,QACd,IAAI,EACT,CAEA,IAAM,KAAO,SAAS,cAAc,CAAC,eA0EnC,SAAS,UAAU,CAAO,CAAE,CAAI,CAAE,CAAK,CAAE,CAAS,EAChD,EAAU,WAAW,CAAG,EAExB,IAAM,EAAc,EAAM,QAAQ,CAAC,aAAa,CAAC,gBACjD,CAAA,EAAY,SAAS,CAAG,eACxB,EAAU,SAAS,CAAG,aAElB,AAAS,YAAT,EACF,EAAY,SAAS,CAAC,GAAG,CAAC,aAAc,cAExC,EAAY,SAAS,CAAC,GAAG,CAAC,YAAa,cAIzC,EAAM,IAAI,EACZ,CAxFF,KAAK,gBAAgB,CAAC,SAAU,eAAgB,CAAC,EAE7C,EAAE,cAAc,GAEhB,IAAM,EAAU,SAAS,cAAc,CAAC,aAClC,EAAY,EAAQ,aAAa,CAAC,eAClC,EAAQ,IAAI,UAAU,KAAK,CAAC,GAElC,GAAI,CAAC,IAAI,CAAC,aAAa,GAAI,YACzB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,iBAIrB,GAAI,AAAsB,aAAtB,OAAO,WAA4B,YACrC,QAAQ,KAAK,CAAC,wBAIhB,IAAM,EAAQ,MAAM,WAAW,OAAO,CAAC,2CAA4C,CAAE,OAAQ,QAAS,GACtG,GAAI,CAAC,EAAO,YACV,UAAU,0BAA2B,SAAU,EAAO,GAIxD,IAAM,EAAW,CACf,MAAO,cAAc,SAAS,cAAc,CAAC,SAAS,KAAK,EAC3D,QAAS,cAAc,SAAS,cAAc,CAAC,WAAW,KAAK,EAC/D,QAAS,cAAc,SAAS,cAAc,CAAC,WAAW,KAAK,EAC/D,uBAAwB,CAC1B,CAGI,AAAC,CAAA,EAAS,KAAK,EAAK,6BAA6B,IAAI,CAAC,EAAS,KAAK,GACtE,OAAO,IAAI,CAAC,sCAEV,CAAA,CAAC,EAAS,OAAO,EAAI,EAAS,OAAO,CAAC,IAAI,GAAG,MAAM,CAAG,GAAK,EAAS,OAAO,CAAC,MAAM,CAAG,GAAA,GACvF,OAAO,IAAI,CAAC,4CAEV,CAAA,CAAC,EAAS,OAAO,EAAG,EAAS,OAAO,CAAC,IAAI,GAAG,MAAM,CAAG,GAAK,EAAS,OAAO,CAAC,MAAM,CAAG,GAAA,GACtF,OAAO,IAAI,CAAC,6CAGd,IAAM,EAAY,KAAK,aAAa,CAAC,yBAC/B,EAAkB,EAAU,SAAS,AAC3C,CAAA,EAAU,SAAS,CAAG,6GACtB,EAAU,QAAQ,CAAG,CAAA,EAErB,GAAI,CACF,IAAM,EAAW,MAAM,MAAM,kBAAmB,CAC9C,OAAQ,OACR,QAAS,CAAE,eAAgB,kBAAmB,EAC9C,KAAM,KAAK,SAAS,CAAC,EACvB,GAEM,EAAS,MAAM,EAAS,IAAI,EAE9B,CAAA,EAAS,EAAE,EACb,UAAU,EAAO,OAAO,EAAI,6BAA8B,UAAW,EAAO,GAC5E,KAAK,KAAK,IAEV,UAAU,EAAO,OAAO,EAAI,0BAA2B,SAAU,EAAO,EAE5E,CAAE,MAAO,EAAK,CACZ,QAAQ,KAAK,CAAC,GACd,UAAU,yCAA0C,SAAU,EAAO,EACvE,QAAU,CAER,EAAU,SAAS,CAAG,EACtB,EAAU,QAAQ,CAAG,CAAA,EACrB,KAAK,SAAS,CAAC,MAAM,CAAC,gBACxB,CACF","sources":["<anon>","public/js/home/handler.js"],"sourcesContent":["function sanitizeInput(input) {\n    return input.replace(/</g, '&lt;') // Escape HTML tags\n    .replace(/>/g, '&gt;').trim(); // Remove whitespace\n}\nconst form = document.getElementById(\"contactForm\");\nform.addEventListener(\"submit\", async function(e) {\n    e.preventDefault();\n    const toastEl = document.getElementById('formToast');\n    const toastBody = toastEl.querySelector('.toast-body');\n    const toast = new bootstrap.Toast(toastEl);\n    if (!this.checkValidity()) {\n        this.classList.add('was-validated');\n        return;\n    }\n    if (typeof grecaptcha === 'undefined') {\n        console.error('reCAPTCHA not loaded');\n        return;\n    }\n    const token = await grecaptcha.execute('6Lc560ErAAAAAP7bly7AL_F_5AxlDf8zW7xxbML6', {\n        action: 'submit'\n    });\n    if (!token) {\n        showToast(\"reCAPTCHA token missing\", \"danger\", toast, toastBody);\n        return;\n    }\n    const formData = {\n        email: sanitizeInput(document.getElementById(\"email\").value),\n        subject: sanitizeInput(document.getElementById(\"subject\").value),\n        message: sanitizeInput(document.getElementById(\"message\").value),\n        'g-recaptcha-response': token\n    };\n    if (!formData.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) errors.push('Please enter a valid email address');\n    if (!formData.subject || formData.subject.trim().length < 1 || formData.subject.length > 100) errors.push('Subject must be between 1-100 characters');\n    if (!formData.message || formData.message.trim().length < 1 || formData.message.length > 1000) errors.push('Message must be between 1-1000 characters');\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\n    const originalBtnText = submitBtn.innerHTML;\n    submitBtn.innerHTML = '<div class=\"status\"><span class=\"spinner-border\" role=\"status\" aria-hidden=\"true\"></span> Sending...</div>';\n    submitBtn.disabled = true;\n    try {\n        const response = await fetch(\"/api/send-email\", {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(formData)\n        });\n        const result = await response.json();\n        if (response.ok) {\n            showToast(result.message || \"Message sent successfully!\", \"success\", toast, toastBody);\n            form.reset();\n        } else showToast(result.message || \"Failed to send message.\", \"danger\", toast, toastBody);\n    } catch (err) {\n        console.error(err);\n        showToast(\"Network error. Please try again later.\", \"danger\", toast, toastBody);\n    } finally{\n        // Reset button state\n        submitBtn.innerHTML = originalBtnText;\n        submitBtn.disabled = false;\n        form.classList.remove('was-validated');\n    }\n});\nfunction showToast(message, type, toast, toastBody) {\n    toastBody.textContent = message;\n    const toastHeader = toast._element.querySelector('.toast-header');\n    toastHeader.className = 'toast-header';\n    toastBody.className = 'toast-body';\n    if (type === \"success\") toastHeader.classList.add('bg-success', 'text-white');\n    else toastHeader.classList.add('bg-danger', 'text-white');\n    // Show toast\n    toast.show();\n}\n\n//# sourceMappingURL=pages.2ae35ac1.js.map\n","function sanitizeInput(input) {\r\n  return input\r\n    .replace(/</g, '&lt;')  // Escape HTML tags\r\n    .replace(/>/g, '&gt;')\r\n    .trim();              // Remove whitespace\r\n}\r\n\r\nconst form = document.getElementById(\"contactForm\");\r\nform.addEventListener(\"submit\", async function (e) {\r\n   \r\n    e.preventDefault();\r\n\r\n    const toastEl = document.getElementById('formToast');\r\n    const toastBody = toastEl.querySelector('.toast-body');\r\n    const toast = new bootstrap.Toast(toastEl);\r\n\r\n    if (!this.checkValidity()) {\r\n      this.classList.add('was-validated');\r\n      return;\r\n    }\r\n\r\n    if (typeof grecaptcha === 'undefined') {\r\n      console.error('reCAPTCHA not loaded');\r\n      return;\r\n    }\r\n\r\n    const token = await grecaptcha.execute('6Lc560ErAAAAAP7bly7AL_F_5AxlDf8zW7xxbML6', { action: 'submit' });\r\n    if (!token) {\r\n      showToast(\"reCAPTCHA token missing\", \"danger\", toast, toastBody);\r\n      return;\r\n    }\r\n      \r\n    const formData = {\r\n      email: sanitizeInput(document.getElementById(\"email\").value),\r\n      subject: sanitizeInput(document.getElementById(\"subject\").value),\r\n      message: sanitizeInput(document.getElementById(\"message\").value),\r\n      'g-recaptcha-response': token\r\n    };\r\n\r\n    \r\n    if (!formData.email || !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(formData.email)) {\r\n      errors.push('Please enter a valid email address');\r\n    }\r\n    if (!formData.subject || formData.subject.trim().length < 1 || formData.subject.length > 100) {\r\n      errors.push('Subject must be between 1-100 characters');\r\n    }\r\n    if (!formData.message ||formData.message.trim().length < 1 || formData.message.length > 1000) {\r\n      errors.push('Message must be between 1-1000 characters');\r\n    }\r\n\r\n    const submitBtn = form.querySelector('button[type=\"submit\"]');\r\n    const originalBtnText = submitBtn.innerHTML;\r\n    submitBtn.innerHTML = '<div class=\"status\"><span class=\"spinner-border\" role=\"status\" aria-hidden=\"true\"></span> Sending...</div>';\r\n    submitBtn.disabled = true;\r\n\r\n    try {\r\n      const response = await fetch(\"/api/send-email\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(formData),\r\n      });\r\n\r\n      const result = await response.json();\r\n\r\n      if (response.ok) {\r\n        showToast(result.message || \"Message sent successfully!\", \"success\", toast, toastBody);\r\n        form.reset();\r\n      } else {\r\n        showToast(result.message || \"Failed to send message.\", \"danger\", toast, toastBody);\r\n      }\r\n    } catch (err) {\r\n      console.error(err);\r\n      showToast(\"Network error. Please try again later.\", \"danger\", toast, toastBody);\r\n    } finally {\r\n      // Reset button state\r\n      submitBtn.innerHTML = originalBtnText;\r\n      submitBtn.disabled = false;\r\n      form.classList.remove('was-validated');\r\n    }\r\n  });\r\n\r\n  function showToast(message, type, toast, toastBody) {\r\n    toastBody.textContent = message;\r\n    \r\n    const toastHeader = toast._element.querySelector('.toast-header');\r\n    toastHeader.className = 'toast-header';\r\n    toastBody.className = 'toast-body';\r\n    \r\n    if (type === \"success\") {\r\n      toastHeader.classList.add('bg-success', 'text-white');\r\n    } else {\r\n      toastHeader.classList.add('bg-danger', 'text-white');\r\n    }\r\n    \r\n    // Show toast\r\n    toast.show();\r\n  }\r\n"],"names":["sanitizeInput","input","replace","trim","form","document","getElementById","showToast","message","type","toast","toastBody","textContent","toastHeader","_element","querySelector","className","classList","add","show","addEventListener","e","preventDefault","toastEl","bootstrap","Toast","checkValidity","grecaptcha","console","error","token","execute","action","formData","email","value","subject","test","errors","push","length","submitBtn","originalBtnText","innerHTML","disabled","response","fetch","method","headers","body","JSON","stringify","result","json","ok","reset","err","remove"],"version":3,"file":"pages.2ae35ac1.js.map"}