{"mappings":"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","sources":["<anon>","public/js/list/basic-controls-list.js"],"sourcesContent":["const List = document.getElementById('displayList');\nconst list_items = List.children;\nconst itemInput = document.getElementById('item');\nconst quantityInput = document.getElementById('quantity');\nconst unitInput = document.getElementById('unit');\nconst categoryInput = document.getElementById('category');\nconst filterCategoryBtn = document.getElementById('filterCategory');\nconst filterNameBtn = document.getElementById('filterName');\nconst joinfilterBtn = document.getElementById('filterAll');\nconst successMessage = document.getElementById('successMessage');\nconst errorMessage = document.getElementById('errorMessage');\nconst fileInfo = document.getElementById('fileInfo');\nconst submitBtn = document.getElementById('submitBtn');\nconst resetBtn = document.getElementById('resetBtn');\nconst downloadBtn = document.getElementById('downloadBtn');\nconst uploadBtn = document.getElementById('uploadBtn');\nfunction inputValidation(item, quantity, unit, errorMessage) {\n    errorMessage.textContent = ''; // Clear previous error messages\n    // Validation for 'item'\n    if (item.length < 2) {\n        errorMessage.textContent = \"Write an item.\";\n        return false;\n    }\n    if (!/[a-zA-Z]/.test(item)) {\n        errorMessage.textContent = \"Item has no letters.\";\n        return false;\n    }\n    if (/(.)\\1{3,}/.test(item)) {\n        errorMessage.textContent = \"Item has too many repeating characters.\";\n        return false;\n    }\n    // Validation for 'quantity'\n    const parsedQuantity = parseFloat(quantity);\n    if (isNaN(parsedQuantity) || parsedQuantity <= 0) {\n        errorMessage.textContent = \"Quantity must be a positive number.\";\n        return false;\n    }\n    // Units can be short (e.g., \"kg\", \"pcs\"), so minimum length might be 1 or 0 if optional\n    if (unit.length < 1) {\n        errorMessage.textContent = \"Select a unit.\";\n        return false;\n    }\n    if (!/[a-zA-Z]/.test(unit)) {\n        errorMessage.textContent = \"Unit has no letters.\";\n        return false;\n    }\n    if (/(.)\\1{3,}/.test(unit)) {\n        errorMessage.textContent = \"Unit has too many repeating characters.\";\n        return false;\n    }\n    return true;\n}\nfunction clearMessages() {\n    errorMessage.textContent = '';\n    fileInfo.textContent = '';\n    fileInfo.className = '';\n}\nsubmitBtn.addEventListener('click', saveList);\nfunction saveList(e) {\n    e.preventDefault();\n    clearMessages();\n    const itemValue = itemInput.value.trim();\n    const quantityValue = quantityInput.value.trim();\n    const unitValue = unitInput.value.trim();\n    const categoryValue = categoryInput.value.trim() || 'Other';\n    if (!inputValidation(itemValue, quantityValue, unitValue, errorMessage)) {\n        itemInput.focus();\n        return;\n    }\n    let list_items_dom = Array.from(list_items);\n    const newItemTextUppercase = itemValue.toUpperCase();\n    const isDuplicate = list_items_dom.some((listItem)=>{\n        return listItem.dataset.item === newItemTextUppercase;\n    });\n    if (isDuplicate) {\n        errorMessage.textContent = 'Item already exists in the list';\n        itemInput.value = '';\n        itemInput.focus();\n        return;\n    }\n    let listItem = document.createElement('li');\n    listItem.className = 'list-group-item fs-5 mb-3 rounded-3';\n    listItem.dataset.item = newItemTextUppercase;\n    listItem.dataset.originalItem = itemValue;\n    listItem.dataset.quantity = quantityValue;\n    listItem.dataset.unit = unitValue;\n    listItem.dataset.category = categoryValue;\n    List.append(listItem);\n    updateItemNumbers();\n    itemInput.value = '';\n    quantityInput.value = '';\n    unitInput.value = '';\n    if (window.innerWidth >= 768) itemInput.focus();\n}\nfunction updateItemNumbers() {\n    for(let i = 0; i < list_items.length; i++){\n        const listItem = list_items[i];\n        const itemText = listItem.dataset.originalItem;\n        const quantity = listItem.dataset.quantity;\n        const unit = listItem.dataset.unit;\n        const category1 = listItem.dataset.category || 'Other';\n        const check = listItem.dataset.checked;\n        let displayContent = `${category1}: ${itemText} ${quantity}${unit}`.trim();\n        listItem.innerHTML = `\n      ${i + 1}) ${displayContent};\n    `;\n        listItem.draggable = \"true\";\n        const removeBtn = createBtn();\n        listItem.appendChild(removeBtn);\n        let checkBox = document.createElement('input');\n        checkBox.type = 'checkbox';\n        checkBox.id = 'gotItem' + (i + 1);\n        checkBox.className = 'form-check-input mx-2 float-end';\n        checkBox.checked = check === 'true';\n        checkBox.onclick = function(_) {\n            this.parentElement.dataset.checked = this.checked;\n            return this.parentElement.ariaLabel = `${i + 1}. Category: ${category1} Item:${itemText}, Quantity: ${quantity}${unit}, checkbox: ${this.checked ? 'checked' : 'not checked'}`;\n        };\n        listItem.appendChild(checkBox);\n        listItem.ariaLabel = `${i + 1}. Category: ${category1} Item:${itemText}, Quantity: ${quantity}${unit}, checkbox: ${checkBox.checked ? 'checked' : 'not checked'}`;\n        addDragAndDropListeners(listItem);\n    }\n}\nfunction createBtn() {\n    let btn = document.createElement('button');\n    btn.innerHTML = '<i class=\"bi bi-trash\"></i>';\n    btn.className = 'btn btn-danger btn-sm float-end ms-2';\n    btn.onclick = function() {\n        this.parentElement.remove();\n        clearMessages();\n        updateItemNumbers();\n    };\n    return btn;\n}\nresetBtn.addEventListener('click', resetList);\nfunction resetList() {\n    clearMessages();\n    List.innerHTML = '';\n    document.getElementById('errorMessage').textContent = '';\n    document.getElementById('item').value = '';\n    document.getElementById('quantity').value = '';\n    document.getElementById('unit').value = '';\n    document.getElementById('item').focus();\n}\ndownloadBtn.addEventListener('click', verify);\nfunction verify() {\n    clearMessages();\n    if (list_items.length === 0) {\n        errorMessage.textContent = 'List is empty. Please add items before downloading.';\n        return;\n    }\n    let button = document.getElementById('downloadBtn');\n    button.id = 'confirmDownloadBtn';\n    button.textContent = 'Confirm Download';\n    button.removeEventListener('click', verify);\n    button.addEventListener('click', downloadList);\n}\nfunction downloadList() {\n    let list_items_dom = Array.from(list_items);\n    clearMessages();\n    if (list_items.length === 0) errorMessage.textContent = 'List is empty. Please add items before downloading.';\n    else {\n        let textContent = list_items_dom.map((li)=>{\n            const item = li.dataset.originalItem;\n            const quantity = li.dataset.quantity;\n            const unit = li.dataset.unit;\n            return `${item} ${quantity}${unit}`.trim();\n        }).filter((line)=>line !== '') // Filter out empty lines\n        .join('\\n');\n        let blob = new Blob([\n            textContent\n        ], {\n            type: 'text/plain'\n        });\n        let url = URL.createObjectURL(blob);\n        let a = document.createElement('a');\n        a.href = url;\n        a.download = 'list.txt';\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n        URL.revokeObjectURL(url);\n    }\n    let button = document.getElementById('confirmDownloadBtn');\n    button.removeEventListener('click', downloadList);\n    button.id = 'downloadBtn';\n    button.textContent = 'Download List';\n    button.addEventListener('click', verify);\n}\nuploadBtn.addEventListener('click', uploadList);\nasync function uploadList(e) {\n    e.preventDefault();\n    errorMessage.textContent = '';\n    try {\n        const files = await showFileExplorer({\n            accept: '.txt',\n            multiple: false\n        });\n        if (files && files.length > 0) await processUploadedFile(files[0]);\n        else errorMessage.textContent = 'No file selected';\n    } catch (error) {\n        errorMessage.textContent = `Error: ${error.message}`;\n    }\n}\nfunction showFileExplorer(options) {\n    return new Promise((resolve, reject)=>{\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = options.accept || '';\n        input.multiple = options.multiple || false;\n        input.onchange = ()=>{\n            if (input.files.length > 0) resolve(Array.from(input.files));\n            else reject(new Error('No files selected'));\n        };\n        input.onerror = ()=>{\n            reject(new Error('Error opening file explorer'));\n        };\n        input.click(); // Trigger the file selection dialog\n    });\n}\n// --------------------------------------------------------------------------------------------------\nasync function processUploadedFile(file) {\n    resetList();\n    errorMessage.textContent = '';\n    if (!file || file.type !== 'text/plain') {\n        errorMessage.textContent = 'Please upload a valid text file';\n        return;\n    }\n    // Update info display\n    fileInfo.textContent = '';\n    fileInfo.className = 'alert alert-info fs-5';\n    fileInfo.innerHTML = `<strong>Selected file:</strong> ${file.name}`;\n    fileInfo.innerHTML += `<br><strong>File size:</strong> ${formatFileSize(file.size)}`;\n    // Read file content\n    try {\n        const fileContent = await readFileAsText(file);\n        const lines = fileContent.split('\\n').filter((line)=>line.trim());\n        if (lines.length === 0) {\n            errorMessage.textContent = 'File is empty or contains no valid items';\n            return;\n        }\n        // Clear existing list\n        const List = document.getElementById('displayList');\n        // Add items from file directly to the list, setting data attributes\n        lines.forEach((itemTextLine)=>{\n            const listItem = document.createElement('li');\n            listItem.className = 'list-group-item fs-5 mb-3 rounded-3';\n            // Attempt to parse the line into item, quantity, unit for data attributes\n            // Assuming format like \"ITEM QUANTITYUNIT\" or just \"ITEM\"\n            const match = itemTextLine.trim().match(/^([A-Za-z\\s]+)\\s*(\\d+(\\.\\d+)?)\\s*([A-Za-z]+)?$/i); // Case-insensitive match\n            if (match) {\n                const item = match[1].trim();\n                const quantity = match[2] || '';\n                const unit = match[4] || '';\n                listItem.dataset.item = item.toUpperCase(); // Store uppercased for comparison\n                listItem.dataset.originalItem = item; // Store original for display and saving\n                listItem.dataset.quantity = quantity;\n                listItem.dataset.unit = unit;\n                listItem.textContent = `${category} ${item} ${quantity}${unit}`.trim(); // Initial display using original casing\n            } else {\n                errorMessage.textContent = `Invalid format in line: \"${itemTextLine}\". Expected format: \"ITEM QUANTITYUNIT\"`;\n                return; //Skip line\n            }\n            List.append(listItem); // Add to DOM\n        });\n        updateItemNumbers(); // Update numbering and add buttons for newly loaded DOM items\n        fileInfo.innerHTML = `<strong>Selected file:</strong> ${file.name} (Loaded)`; // Update status\n    } catch (error) {\n        errorMessage.textContent = `Error reading file: ${error.message}`;\n    }\n}\nfunction readFileAsText(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.onload = (event)=>resolve(event.target.result);\n        reader.onerror = (error)=>reject(error);\n        reader.readAsText(file);\n    });\n}\nfunction formatFileSize(bytes) {\n    if (bytes === 0) return '0 Bytes';\n    const k = 1024;\n    const sizes = [\n        'Bytes',\n        'KB',\n        'MB',\n        'GB'\n    ];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\n/* LIST FILTERING LOGIC */ filterCategoryBtn.addEventListener('click', filterListByCategory);\nfunction filterListByCategory() {\n    const selectedCategory = categoryInput.value;\n    const listItems = Array.from(list_items);\n    listItems.forEach((listItem)=>{\n        listItem.style.display = '';\n    });\n    if (selectedCategory === '') return;\n    listItems.forEach((listItem)=>{\n        const itemCategory = listItem.dataset.category;\n        if (itemCategory === selectedCategory) listItem.style.display = '';\n        else listItem.style.display = 'none';\n    });\n    successMessage.textContent = 'Items within this category!';\n}\nfilterNameBtn.addEventListener('click', filterListByName);\nfunction filterListByName() {\n    const listItems = Array.from(list_items);\n    const item = itemInput.value.trim();\n    successMessage.textContent = '';\n    listItems.forEach((listItem)=>{\n        listItem.style.display = '';\n    });\n    if (item === '') return;\n    listItems.forEach((listItem)=>{\n        const ItemUppercase = item.toUpperCase();\n        if (listItem.dataset.item === ItemUppercase) listItem.style.display = '';\n        else listItem.style.display = 'none';\n    });\n    successMessage.textContent = 'Items with this name!';\n}\njoinfilterBtn.addEventListener('click', joinFilter);\nfunction joinFilter() {\n    const listItems = Array.from(list_items);\n    const selectedCategory = categoryInput.value;\n    const item = itemInput.value.trim();\n    listItems.forEach((listItem)=>{\n        listItem.style.display = '';\n    });\n    if (item === '' || selectedCategory === '') return;\n    listItems.forEach((listItem)=>{\n        const ItemUppercase = item.toUpperCase();\n        const itemCategory = listItem.dataset.category;\n        if (listItem.dataset.item === ItemUppercase && itemCategory === selectedCategory) listItem.style.display = '';\n        else listItem.style.display = 'none';\n    });\n    successMessage.textContent = 'Items that match all filters!';\n}\n\n//# sourceMappingURL=list.d519b3fa.js.map\n","const List = document.getElementById('displayList');\r\nconst list_items = List.children;\r\nconst itemInput = document.getElementById('item');\r\nconst quantityInput = document.getElementById('quantity');\r\nconst unitInput = document.getElementById('unit');\r\nconst categoryInput = document.getElementById('category');\r\nconst filterCategoryBtn = document.getElementById('filterCategory');\r\nconst filterNameBtn = document.getElementById('filterName');\r\nconst joinfilterBtn = document.getElementById('filterAll');\r\nconst successMessage = document.getElementById('successMessage');\r\nconst errorMessage = document.getElementById('errorMessage');\r\nconst fileInfo = document.getElementById('fileInfo'); \r\nconst submitBtn = document.getElementById('submitBtn');\r\nconst resetBtn = document.getElementById('resetBtn');\r\nconst downloadBtn = document.getElementById('downloadBtn');\r\nconst uploadBtn = document.getElementById('uploadBtn');\r\n\r\n\r\nfunction inputValidation(item, quantity, unit, errorMessage){\r\n    errorMessage.textContent = ''; // Clear previous error messages\r\n\r\n    // Validation for 'item'\r\n    if (item.length < 2) {\r\n        errorMessage.textContent = \"Write an item.\";\r\n        return false;\r\n    }\r\n    if (!/[a-zA-Z]/.test(item)) {\r\n      errorMessage.textContent = \"Item has no letters.\";\r\n      return false;\r\n    }\r\n    if (/(.)\\1{3,}/.test(item)) { // Checks for 4 or more of the same character in a row\r\n        errorMessage.textContent = \"Item has too many repeating characters.\";\r\n        return false;\r\n    }\r\n\r\n    // Validation for 'quantity'\r\n    const parsedQuantity = parseFloat(quantity);\r\n    if (isNaN(parsedQuantity) || parsedQuantity <= 0) {\r\n        errorMessage.textContent = \"Quantity must be a positive number.\";\r\n        return false;\r\n    }\r\n\r\n    // Units can be short (e.g., \"kg\", \"pcs\"), so minimum length might be 1 or 0 if optional\r\n        if (unit.length < 1) {\r\n            errorMessage.textContent = \"Select a unit.\";\r\n            return false;\r\n        }\r\n        if (!/[a-zA-Z]/.test(unit)) {\r\n           errorMessage.textContent = \"Unit has no letters.\";\r\n            return false;\r\n        }\r\n        if (/(.)\\1{3,}/.test(unit)) {\r\n            errorMessage.textContent = \"Unit has too many repeating characters.\";\r\n            return false;\r\n        }\r\n\r\n    return true;\r\n}\r\n\r\nfunction clearMessages() {\r\n    errorMessage.textContent = '';\r\n    fileInfo.textContent = '';\r\n    fileInfo.className = '';\r\n}\r\n\r\n\r\nsubmitBtn.addEventListener('click', saveList);\r\nfunction saveList(e) {\r\n  e.preventDefault();\r\n\r\n  clearMessages();\r\n\r\n  const itemValue = itemInput.value.trim();\r\n  const quantityValue = quantityInput.value.trim();\r\n  const unitValue = unitInput.value.trim();\r\n  const categoryValue = categoryInput.value.trim() || 'Other'; \r\n\r\n  if (!inputValidation(itemValue, quantityValue, unitValue, errorMessage)) {\r\n    itemInput.focus(); \r\n    return;\r\n  }\r\n\r\n  let list_items_dom = Array.from(list_items);\r\n  const newItemTextUppercase = itemValue.toUpperCase(); \r\n  const isDuplicate = list_items_dom.some(listItem => {\r\n      return listItem.dataset.item === newItemTextUppercase;\r\n  });\r\n\r\n if (isDuplicate) {\r\n    errorMessage.textContent = 'Item already exists in the list';\r\n    itemInput.value = ''; \r\n    itemInput.focus();\r\n    return;\r\n }\r\n\r\n  let listItem = document.createElement('li');\r\n  listItem.className = 'list-group-item fs-5 mb-3 rounded-3';\r\n  listItem.dataset.item = newItemTextUppercase;\r\n  listItem.dataset.originalItem = itemValue;\r\n  listItem.dataset.quantity = quantityValue;\r\n  listItem.dataset.unit = unitValue;\r\n  listItem.dataset.category = categoryValue;\r\n  List.append(listItem);\r\n  updateItemNumbers(); \r\n\r\n  itemInput.value = '';\r\n  quantityInput.value = '';\r\n  unitInput.value = '';\r\n  if (window.innerWidth >= 768) { // Only focus on desktop/tablet\r\n    itemInput.focus();\r\n  }\r\n}\r\n\r\nfunction updateItemNumbers() {\r\n\r\n  for (let i = 0; i < list_items.length; i++) {\r\n    const listItem = list_items[i];\r\n\r\n    const itemText = listItem.dataset.originalItem;\r\n    const quantity = listItem.dataset.quantity;\r\n    const unit = listItem.dataset.unit;\r\n    const category = listItem.dataset.category || 'Other'; \r\n    const check = listItem.dataset.checked;\r\n\r\n    let displayContent = `${category}: ${itemText} ${quantity}${unit}`.trim();\r\n    listItem.innerHTML = `\r\n      ${i+1}) ${displayContent};\r\n    `;\r\n    \r\n    listItem.draggable = \"true\";\r\n    const removeBtn = createBtn();\r\n    listItem.appendChild(removeBtn);\r\n    let checkBox = document.createElement('input');\r\n    checkBox.type = 'checkbox';\r\n    checkBox.id = 'gotItem' + (i+1);\r\n    checkBox.className = 'form-check-input mx-2 float-end'\r\n    checkBox.checked = (check === 'true');\r\n    checkBox.onclick = function(_){\r\n      this.parentElement.dataset.checked = this.checked;\r\n      return this.parentElement.ariaLabel = `${i + 1}. Category: ${category} Item:${itemText}, Quantity: ${quantity}${unit}, checkbox: ${this.checked ? 'checked' : 'not checked'}`;\r\n    }\r\n    listItem.appendChild(checkBox);\r\n    listItem.ariaLabel = `${i + 1}. Category: ${category} Item:${itemText}, Quantity: ${quantity}${unit}, checkbox: ${checkBox.checked ? 'checked' : 'not checked'}`;\r\n    addDragAndDropListeners(listItem);\r\n  }\r\n}\r\n\r\nfunction createBtn() {\r\n  let btn = document.createElement('button');\r\n  btn.innerHTML = '<i class=\"bi bi-trash\"></i>';\r\n  btn.className = 'btn btn-danger btn-sm float-end ms-2';\r\n  btn.onclick = function() {\r\n      this.parentElement.remove(); \r\n      clearMessages();\r\n      updateItemNumbers(); \r\n    };\r\n  return btn;\r\n}\r\n\r\nresetBtn.addEventListener('click', resetList);\r\nfunction resetList() {\r\n  clearMessages();\r\n  List.innerHTML = '';\r\n  document.getElementById('errorMessage').textContent = '';\r\n  document.getElementById('item').value = '';\r\n  document.getElementById('quantity').value = '';\r\n  document.getElementById('unit').value = '';    \r\n  document.getElementById('item').focus(); \r\n}\r\n\r\ndownloadBtn.addEventListener('click', verify);\r\nfunction verify() {\r\n\r\n  clearMessages();\r\n\r\n  if (list_items.length === 0) {\r\n    errorMessage.textContent = 'List is empty. Please add items before downloading.';\r\n    return;\r\n  }\r\n\r\n  let button = document.getElementById('downloadBtn');\r\n  button.id = 'confirmDownloadBtn';\r\n  button.textContent = 'Confirm Download';\r\n  button.removeEventListener('click', verify);\r\n  button.addEventListener('click', downloadList); \r\n}\r\n\r\nfunction downloadList() {\r\n\r\n  let list_items_dom = Array.from(list_items);\r\n clearMessages();\r\n\r\n  if (list_items.length === 0) {\r\n    errorMessage.textContent = 'List is empty. Please add items before downloading.';\r\n  }\r\n  else{\r\n    let textContent = list_items_dom \r\n    .map((li) => {\r\n        const item = li.dataset.originalItem;\r\n        const quantity = li.dataset.quantity;\r\n        const unit = li.dataset.unit;\r\n        return `${item} ${quantity}${unit}`.trim();\r\n    })\r\n    .filter(line => line !== '') // Filter out empty lines\r\n    .join('\\n');\r\n\r\n    let blob = new Blob([textContent], { type: 'text/plain' });\r\n    let url = URL.createObjectURL(blob);\r\n\r\n    let a = document.createElement('a');\r\n    a.href = url;\r\n    a.download = 'list.txt';\r\n    document.body.appendChild(a);\r\n    a.click();\r\n\r\n    document.body.removeChild(a);\r\n    URL.revokeObjectURL(url);\r\n  }\r\n  \r\n  let button = document.getElementById('confirmDownloadBtn');\r\n  button.removeEventListener('click', downloadList);\r\n  button.id = 'downloadBtn';\r\n  button.textContent = 'Download List';\r\n  button.addEventListener('click', verify); \r\n}\r\n\r\nuploadBtn.addEventListener('click', uploadList);\r\nasync function uploadList(e) {\r\n  e.preventDefault();\r\n\r\n  errorMessage.textContent = '';\r\n  try {\r\n    const files = await showFileExplorer({\r\n      accept: '.txt',\r\n      multiple: false\r\n    });\r\n\r\n    if (files && files.length > 0) {\r\n      await processUploadedFile(files[0]);\r\n    } else {\r\n      errorMessage.textContent = 'No file selected';\r\n    }\r\n  } catch (error) {\r\n    errorMessage.textContent = `Error: ${error.message}`;\r\n  }\r\n}\r\n\r\nfunction showFileExplorer(options) {\r\n  return new Promise((resolve, reject) => {\r\n    const input = document.createElement('input');\r\n    input.type = 'file';\r\n    input.accept = options.accept || '';\r\n    input.multiple = options.multiple || false;\r\n\r\n    input.onchange = () => {\r\n      if (input.files.length > 0) {\r\n        resolve(Array.from(input.files));\r\n      } else {\r\n        reject(new Error('No files selected'));\r\n      }\r\n    };\r\n\r\n    input.onerror = () => {\r\n      reject(new Error('Error opening file explorer'));\r\n    };\r\n\r\n    input.click(); // Trigger the file selection dialog\r\n  });\r\n}\r\n// --------------------------------------------------------------------------------------------------\r\nasync function processUploadedFile(file) {\r\n\r\n  resetList();\r\n\r\n  errorMessage.textContent = '';\r\n  if (!file || file.type !== 'text/plain') {\r\n    errorMessage.textContent = 'Please upload a valid text file';\r\n    return;\r\n  }\r\n\r\n  // Update info display\r\n  fileInfo.textContent = '';\r\n  fileInfo.className = 'alert alert-info fs-5';\r\n  fileInfo.innerHTML = `<strong>Selected file:</strong> ${file.name}`;\r\n  fileInfo.innerHTML += `<br><strong>File size:</strong> ${formatFileSize(file.size)}`;\r\n\r\n  // Read file content\r\n  try {\r\n    const fileContent = await readFileAsText(file);\r\n    const lines = fileContent.split('\\n').filter(line => line.trim());\r\n\r\n    if (lines.length === 0) {\r\n      errorMessage.textContent = 'File is empty or contains no valid items';\r\n      return;\r\n    }\r\n\r\n    // Clear existing list\r\n     \r\n\r\n    const List = document.getElementById('displayList');\r\n\r\n    // Add items from file directly to the list, setting data attributes\r\n    lines.forEach(itemTextLine => {\r\n      const listItem = document.createElement('li');\r\n      listItem.className = 'list-group-item fs-5 mb-3 rounded-3';\r\n\r\n      // Attempt to parse the line into item, quantity, unit for data attributes\r\n      // Assuming format like \"ITEM QUANTITYUNIT\" or just \"ITEM\"\r\n      const match = itemTextLine.trim().match(/^([A-Za-z\\s]+)\\s*(\\d+(\\.\\d+)?)\\s*([A-Za-z]+)?$/i); // Case-insensitive match\r\n      if (match) {\r\n          const item = match[1].trim();\r\n          const quantity = match[2] || '';\r\n          const unit = match[4] || '';\r\n          listItem.dataset.item = item.toUpperCase(); // Store uppercased for comparison\r\n          listItem.dataset.originalItem = item; // Store original for display and saving\r\n          listItem.dataset.quantity = quantity;\r\n          listItem.dataset.unit = unit;\r\n          listItem.textContent = `${category} ${item} ${quantity}${unit}`.trim(); // Initial display using original casing\r\n      } else {\r\n          errorMessage.textContent = `Invalid format in line: \"${itemTextLine}\". Expected format: \"ITEM QUANTITYUNIT\"`;\r\n          return; //Skip line\r\n      }\r\n      List.append(listItem); // Add to DOM\r\n    });\r\n\r\n    updateItemNumbers(); // Update numbering and add buttons for newly loaded DOM items\r\n    fileInfo.innerHTML = `<strong>Selected file:</strong> ${file.name} (Loaded)`; // Update status\r\n  } catch (error) {\r\n    errorMessage.textContent = `Error reading file: ${error.message}`;\r\n  }\r\n}\r\n\r\nfunction readFileAsText(file) {\r\n  return new Promise((resolve, reject) => {\r\n    const reader = new FileReader();\r\n    reader.onload = event => resolve(event.target.result);\r\n    reader.onerror = error => reject(error);\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n\r\nfunction formatFileSize(bytes) {\r\n  if (bytes === 0) return '0 Bytes';\r\n  const k = 1024;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB'];\r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n}\r\n\r\n/* LIST FILTERING LOGIC */\r\nfilterCategoryBtn.addEventListener('click', filterListByCategory);\r\nfunction filterListByCategory() {\r\n    const selectedCategory = categoryInput.value;\r\n    const listItems = Array.from(list_items);\r\n\r\n    listItems.forEach(listItem =>{\r\n      listItem.style.display = '';\r\n    })\r\n    \r\n    if (selectedCategory === '') {\r\n      return;\r\n    }\r\n\r\n    listItems.forEach(listItem => {\r\n        const itemCategory = listItem.dataset.category;\r\n        if (itemCategory === selectedCategory) {\r\n            listItem.style.display = ''; \r\n        } else {\r\n            listItem.style.display = 'none'; \r\n        }\r\n    });\r\n    successMessage.textContent = 'Items within this category!';\r\n}\r\n\r\nfilterNameBtn.addEventListener('click', filterListByName);\r\nfunction filterListByName(){\r\n     const listItems = Array.from(list_items);\r\n     const item = itemInput.value.trim();   \r\n     successMessage.textContent = '';\r\n\r\n     listItems.forEach(listItem =>{\r\n        listItem.style.display = '';\r\n      });\r\n\r\n      if(item === ''){\r\n        return;\r\n      }\r\n\r\n      listItems.forEach(listItem =>{\r\n        const ItemUppercase = item.toUpperCase();\r\n        if(listItem.dataset.item === ItemUppercase){\r\n          listItem.style.display = ''; \r\n        }\r\n        else{\r\n          listItem.style.display = 'none';\r\n        }\r\n      })\r\n      successMessage.textContent = 'Items with this name!';\r\n  }\r\n\r\n  joinfilterBtn.addEventListener('click', joinFilter);\r\n  function joinFilter(){\r\n      const listItems = Array.from(list_items);\r\n      const selectedCategory = categoryInput.value;\r\n      const item = itemInput.value.trim(); \r\n\r\n      listItems.forEach(listItem =>{\r\n        listItem.style.display = '';\r\n      });\r\n\r\n      if(item === '' || selectedCategory === ''){\r\n        return;\r\n      }\r\n\r\n      listItems.forEach(listItem =>{\r\n        const ItemUppercase = item.toUpperCase();\r\n        const itemCategory = listItem.dataset.category;\r\n        if(listItem.dataset.item === ItemUppercase && itemCategory === selectedCategory){\r\n          listItem.style.display = ''; \r\n        }\r\n        else{\r\n          listItem.style.display = 'none';\r\n        }\r\n      });\r\n      successMessage.textContent = 'Items that match all filters!';\r\n}\r\n     \r\n\r\n"],"names":["List","document","getElementById","list_items","children","itemInput","quantityInput","unitInput","categoryInput","filterCategoryBtn","filterNameBtn","joinfilterBtn","successMessage","errorMessage","fileInfo","submitBtn","resetBtn","downloadBtn","uploadBtn","inputValidation","item","quantity","unit","textContent","length","test","parsedQuantity","parseFloat","isNaN","clearMessages","className","saveList","e","preventDefault","itemValue","value","trim","quantityValue","unitValue","categoryValue","focus","list_items_dom","Array","from","newItemTextUppercase","toUpperCase","some","listItem","dataset","createElement","originalItem","category","append","updateItemNumbers","window","innerWidth","i","itemText","category1","check","checked","displayContent","innerHTML","draggable","removeBtn","createBtn","appendChild","checkBox","type","id","onclick","_","parentElement","ariaLabel","addDragAndDropListeners","btn","remove","resetList","verify","button","removeEventListener","addEventListener","downloadList","blob","Blob","map","li","filter","line","join","url","URL","createObjectURL","a","href","download","body","click","removeChild","revokeObjectURL","uploadList","files","showFileExplorer","accept","multiple","processUploadedFile","error","message","options","Promise","resolve","reject","input","onchange","Error","onerror","file","name","formatFileSize","size","lines","fileContent","readFileAsText","split","forEach","itemTextLine","match","reader","FileReader","onload","event","target","result","readAsText","bytes","Math","floor","log","pow","toFixed","sizes","filterListByCategory","selectedCategory","listItems","style","display","itemCategory","filterListByName","ItemUppercase","joinFilter"],"version":3,"file":"list.d519b3fa.js.map"}